version: 1
name: co-cities-echarts-top15
goal: >
  Implement a vertical Apache ECharts bar chart showing the Top 15 Colorado places by population.
  Bars sorted by population descending; optional color by density (/mi²).
  Emit a DOM CustomEvent `chart:selection` with `{ geoids: string[] }` on bar click selection.
  Use ECharts built-in animations for entrance and updates. ScrollTrigger may be added later only for scrubbed sequences.

constraints:
  - Keep chart config/theme utilities under `src/echarts/` (e.g., `theme.js`, `buildChart.js`).
  - Data must be loaded from `/data/colorado-cities-enriched.geojson`.
  - Compute rank by population in JS and render only Top 15.
  - Ensure chart is accessible and responsive.
  - Do not use GSAP for standard chart animations; rely on ECharts animation config.
  - If scroll-driven scrub is added later, isolate it in a separate module (no change to base animations).
  - Provide a single HTML entry (`index.html`) with a container and minimal CSS for responsiveness.

deliverables:
  - public/index.html (container, script tags or Vite entry; accessible title and description)
  - src/main-echarts.js (fetch + transform GeoJSON, build dataset, wire selection events)
  - src/echarts/buildChart.js (factory to create/update ECharts instance)
  - src/echarts/theme.js (palette + number formatters + axis/tooltip defaults)
  - src/styles.css (responsive container, font settings)
  - data/colorado-cities-enriched.geojson (input file path; assume provided by user)
  - README.md (how to run with Vite or static server; how to select ECharts entry)

implementation_notes:
  - Transform: FeatureCollection.features → rows with { geoid: properties.GEOID, name: properties.NAME, pop: properties.pop, density: properties.density }.
  - Rank: sort by pop desc; slice(0, 15); preserve order for chart labels.
  - ECharts setup (vertical bar chart):
      option = {
        grid: { left: 8, right: 8, top: 16, bottom: 28, containLabel: true },
        animationDuration: 900,
        animationEasing: 'quartOut',
        xAxis: {
          type: 'category',
          data: names,
          axisLabel: { rotate: 40, color: theme.colors.text, fontFamily: theme.fonts.family, fontSize: theme.fonts.size },
          axisTick: { show: false },
          axisLine: { lineStyle: { color: theme.colors.border } }
        },
        yAxis: {
          type: 'value',
          min: 0,
          max: max(values) * 1.1,
          axisLabel: { formatter: formatK, color: theme.colors.text, fontFamily: theme.fonts.family, fontSize: theme.fonts.size },
          splitLine: { show: true, lineStyle: { color: theme.colors.grid } },
          axisLine: { show: false }
        },
        series: [{
          type: 'bar',
          name: 'Population',
          data: values,
          itemStyle: { color: (params) => colorByDensity(params.dataIndex) },
          emphasis: { itemStyle: { color: theme.colors.selected } }
        }],
        tooltip: {
          trigger: 'item',
          borderColor: theme.colors.border,
          borderWidth: 1,
          backgroundColor: 'rgba(0, 0, 0, 0.8)',
          textStyle: { color: '#fff' },
          formatter: (params) => tooltipFormatter(params.dataIndex)
        },
        legend: { show: false }
      };
  - Selection: on chart instance `click`, read `params.dataIndex`, map to GEOID; maintain a Set for selected; update `itemStyle` to dim unselected and highlight selected; call `chart.setOption({ series: [...] }, { lazyUpdate: true })`; dispatch `CustomEvent('chart:selection', { detail: { geoids: [...] } })`.
  - Density coloring: build sequential ramp from min/max density over Top 15; apply via `itemStyle.color` callback.
  - Number formatting: implement `formatK(value)` and `comma(value)` utilities (reuse from Chart.js theme if shared).
  - Accessibility: give container a role/aria-label; ensure sufficient contrast; ensure focus outline on tab to bars (container-level focus and describedby).
  - Responsiveness: use `containLabel`; vertical labels may rotate; allow container overflow-x auto on very narrow screens.

acceptance_tests:
  - Renders Top 15 correctly from GeoJSON.
  - `chart:selection` event emitted with correct GEOIDs (single and multi-select if enabled).
  - Accessible structure (role, aria-label on container; offscreen table link if desired).
  - No GSAP dependency; animations use ECharts options only.
  - Responsive labels with rotation/skipping when narrow.
  - Y-axis uses K notation; tooltips show comma-separated values and density when available.

mobile_features:
  - id: responsive-mobile
    description: Implement responsive mobile layout with horizontal scroll if needed.
    acceptance:
      - Chart width 480px on mobile (≤480px) with horizontal scroll when labels overflow.
      - Legend hidden by default; can be enabled beneath chart on mobile.
      - City labels sized appropriately (10-12px on small mobile) with rotation.

  - id: animation-config
    description: Add configurable animation system.
    acceptance:
      - 'no-animations' class disables all animations globally.
      - 'no-mobile-animations' class disables animations on mobile only.
      - shouldAnimate() function respects configuration classes.


